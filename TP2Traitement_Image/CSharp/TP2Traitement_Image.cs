// This code was generated by MIL CoPilot 10.40.881
// on Wednesday, December 7, 2022
// Compiling and running generated code will require :
// MIL 10 with Service Pack 4

using System;
using System.Text;
using Matrox.MatroxImagingLibrary;

namespace MilCoPilot_TP2Traitement_Image
   {
   class Program
      {
      private const string IMAGE_FILE = @"C:\Users\HENRI_VANLEMMENS\Downloads\LAIT1B.bmp";
      private const string IMAGE1_FILE = @"C:\Users\HENRI_VANLEMMENS\Downloads\lait2mauvais.bmp";

        static void Main(string[] args)
        {
            MIL_ID MilApplication = MIL.M_NULL;
            MIL_ID MilSystem = MIL.M_NULL;
            MIL_ID Image = MIL.M_NULL;
            MIL_ID ChildofImage = MIL.M_NULL;
            MIL_ID ChildofImage2 = MIL.M_NULL;
            MIL_ID Display = MIL.M_NULL;
            MIL_ID resBufX = MIL.M_NULL;
            MIL_ID resBufY = MIL.M_NULL;
            MIL_ID resOneBufX = MIL.M_NULL;
            MIL_ID resOneBufY = MIL.M_NULL;

            MIL.MappAlloc(MIL.M_NULL, MIL.M_DEFAULT, ref MilApplication);
            MIL.MsysAlloc(MIL.M_DEFAULT, "M_SYSTEM_HOST", MIL.M_DEFAULT, MIL.M_DEFAULT, ref MilSystem);
            MIL.MdispAlloc(MilSystem, MIL.M_DEFAULT, "M_DEFAULT", MIL.M_DEFAULT, ref Display);

            // Control Block for Display
            MIL.MdispControl(Display, MIL.M_TITLE, "Display");

            MIL.MbufAlloc2d(MilSystem, 1536, 572, 8 + MIL.M_UNSIGNED, MIL.M_IMAGE + MIL.M_PROC + MIL.M_DISP, ref Image);
            MIL.MbufChildColor2d(Image, MIL.M_ALL_BAND, 0, 0, 768, 572, ref ChildofImage);
            MIL.MbufChildColor2d(Image, MIL.M_ALL_BAND, 768, 0, 768, 572, ref ChildofImage2);

            MIL.MbufLoad(IMAGE_FILE, ChildofImage);

            // First projection
            MIL.MimAllocResult(MilSystem, 768, MIL.M_FLOAT + MIL.M_PROJ_LIST, ref resBufX);
            MIL.MimProjection(ChildofImage, resBufX, MIL.M_0_DEGREE, MIL.M_SUM, MIL.M_NULL);

            // 2eme proj
            MIL.MimAllocResult(MilSystem, 572, MIL.M_FLOAT + MIL.M_PROJ_LIST, ref resBufY);
            MIL.MimProjection(ChildofImage, resBufY, MIL.M_90_DEGREE, MIL.M_SUM, MIL.M_NULL);

            float[] tabFloatX = new float[768];
            float[] tabFloatY = new float[572];

            MIL.MimGetResult(resBufX, MIL.M_VALUE, tabFloatX);
            MIL.MimGetResult(resBufY, MIL.M_VALUE, tabFloatY);

            float tmpMaxX = 0;

            for (int i =1; i < 768 - 1; i++)
            {
                //Console.WriteLine(tabFloatX[i] + "\n");

                if (tabFloatX[i] > tmpMaxX)
                {
                    tmpMaxX = tabFloatX[i];
                }               
            }

            Console.WriteLine("Val Max en X :" + tmpMaxX);

            Console.WriteLine("Press <ENTER> to continue");
            Console.ReadKey();

            float tmpMaxY = 0;

            for (int i = 1; i < 572 - 1; i++)
            {
                //Console.WriteLine(tabFloatY[i] + "\n");

                if (tabFloatY[i] > tmpMaxY)
                {
                    tmpMaxY = tabFloatY[i];
                }
            }

            Console.WriteLine("Val Max en Y :" + tmpMaxY);

            // Copie en X

            int frontX = 0; int frontY = 0;
            int frontXDesc = 0; int frontYDesc = 0;

            int j = 1;
            while(tabFloatX[j] < tmpMaxX / 2)
            {

                j++;
            }

            frontX = j;

            j = frontX;
            while (tabFloatX[j] > tmpMaxX / 2)
            {

                j++;
            }
            frontXDesc = j;

            j = 1;
            while (tabFloatY[j] < tmpMaxY / 2)
            {
                j++;
            }

            frontY = j;

            j = frontY;
            while (tabFloatY[j] > tmpMaxY / 2)
            {

                j++;
            }
            frontYDesc = j;

            Console.WriteLine("Front X : " + frontX + "\n");
            Console.WriteLine("Front Y : " + frontY + "\n");
            Console.WriteLine("Last X : " + frontXDesc + "\n");
            Console.WriteLine("Last Y : " + frontYDesc + "\n");

            MIL_INT DescX = frontXDesc;
            MIL_INT DescY = frontYDesc;

            MIL.MbufCopyColor2d(ChildofImage, ChildofImage2, MIL.M_ALL_BAND, frontX, frontY, MIL.M_ALL_BAND, 0, 0, DescX - frontX, DescY - frontY);
            MIL.MdispSelect(Display, Image);

            Console.WriteLine("Press <ENTER> to continue");
            Console.ReadKey();

            MIL.MbufClear(ChildofImage, 255);
            MIL.MbufCopyColor2d(ChildofImage2, ChildofImage, MIL.M_ALL_BAND, 57, 303, MIL.M_ALL_BAND, 0, 0, 41, 95);
            MIL.MdispSelect(Display, Image);

            Console.WriteLine("Press <ENTER> to continue");
            Console.ReadKey();

            MIL.MimBinarize(ChildofImage, ChildofImage2, MIL.M_BIMODAL + MIL.M_LESS, MIL.M_NULL, MIL.M_NULL);
            MIL.MdispSelect(Display, Image);

            // 1 X Proj

            float[] numberOneXProj = new float[768];

            MIL.MimAllocResult(MilSystem, 768, MIL.M_FLOAT + MIL.M_PROJ_LIST, ref resOneBufX);
            MIL.MimProjection(ChildofImage2, resOneBufX, MIL.M_0_DEGREE, MIL.M_SUM, MIL.M_NULL);

            // 1 Y proj

            float[] numberOneYProj = new float[572];

            MIL.MimAllocResult(MilSystem, 572, MIL.M_FLOAT + MIL.M_PROJ_LIST, ref resOneBufY);
            MIL.MimProjection(ChildofImage2, resOneBufY, MIL.M_90_DEGREE, MIL.M_SUM, MIL.M_NULL);

            MIL.MimGetResult(resOneBufX, MIL.M_VALUE, numberOneXProj);
            MIL.MimGetResult(resOneBufY, MIL.M_VALUE, numberOneYProj);

            Console.WriteLine("X values du 1 :\n");
            for (int i = 0; i < 768; i++)
            {
                Console.WriteLine(numberOneXProj[i] + "\n");
            }

            Console.WriteLine("Y values du 1 :\n");
            for (int i = 0; i < 572; i++)
            {
                Console.WriteLine(numberOneYProj[i] + "\n");
            }

            j = 45;
            while (numberOneXProj[j] == 0)
            {
                j--;
            }

            int maxXNbOne = j;

            
            while (numberOneXProj[j] != 0)
            {
                j--;
            }
            int minXNbOne = j;

            Console.WriteLine("Valeurs X : " + minXNbOne + " et " + maxXNbOne);

            j = 95;
            while (numberOneYProj[j] == 0)
            {
                j--;
            }

            int maxYNbOne = j;


            while (numberOneYProj[j] != 0)
            {
                j--;
            }
            int minYNbOne = j;

            Console.WriteLine("Valeurs Y : " + minYNbOne + " et " + maxYNbOne);

            MIL.MbufClear(ChildofImage, 0);
            MIL.MbufCopyColor2d(ChildofImage2, ChildofImage, MIL.M_ALL_BAND, minXNbOne, minYNbOne, MIL.M_ALL_BAND, 0, 0, maxXNbOne, 95 -maxYNbOne);

            Console.WriteLine("Press <ENTER> to continue");
            Console.ReadKey();

            MIL.MbufClear(ChildofImage2, 255);
            MIL.MbufLoad(@"C:\Users\HENRI_VANLEMMENS\Downloads\1.bmp", ChildofImage2);

            MIL.MimBinarize(ChildofImage2, ChildofImage2, MIL.M_BIMODAL + MIL.M_LESS, MIL.M_NULL, MIL.M_NULL);
            MIL.MdispSelect(Display, Image);

            int nbOfDiff = (int) MIL.MimCountDifference(ChildofImage, ChildofImage2, MIL.M_NULL);
            Console.WriteLine("Val : " + nbOfDiff);

            int Xres1 = maxXNbOne - minXNbOne;
            int Yres1 = maxYNbOne - minYNbOne;

            float nbPix1 = Yres1 * Xres1;
            float tmpNbOfDiff = (float)nbOfDiff;

            Console.WriteLine(nbPix1);

            float pourcentageError = (tmpNbOfDiff / nbPix1) * 100;
            Console.WriteLine("Pourcentage de similitude : " + pourcentageError);

            if(pourcentageError > 40)
            {
                Console.WriteLine("C'est un 1 !");
            }
            else
            {
                Console.WriteLine("Ce n'est pas un 1 !");
            }

            Console.WriteLine("Press <ENTER> to continue");
            Console.ReadKey();

            MIL.MimFree(resOneBufX);
            MIL.MimFree(resOneBufY);
            MIL.MimFree(resBufX);
            MIL.MimFree(resBufY);
            MIL.MbufFree(ChildofImage2);
            MIL.MbufFree(ChildofImage);
            MIL.MbufFree(Image);
            MIL.MdispFree(Display);
            MIL.MsysFree(MilSystem);
            MIL.MappFree(MilApplication);
        }
      }
   }
