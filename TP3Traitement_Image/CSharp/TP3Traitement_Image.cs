// This code was generated by MIL CoPilot 10.40.881
// on Wednesday, December 14, 2022
// Compiling and running generated code will require :
// MIL 10 with Service Pack 4

using System;
using System.Collections.Generic;
using System.Text;
using Matrox.MatroxImagingLibrary;

namespace MilCoPilot_TP3Traitement_Image
   {
   class Program
      {
      private const string IMAGE_FILE = @"C:\Users\HENRI_VANLEMMENS\Downloads\Panneaux.bmp";

        static void Main(string[] args)
        {
            MIL_ID MilApplication = MIL.M_NULL;
            MIL_ID MilSystem = MIL.M_NULL;
            MIL_ID Display = MIL.M_NULL;
            MIL_ID Panneaux = MIL.M_NULL;
            MIL_ID MimBinarizedestination = MIL.M_NULL;
            MIL_ID MimOpendestination = MIL.M_NULL;
            MIL_ID MimEdgeDetectIntensity = MIL.M_NULL;
            byte[,] tab = new byte[476, 424];
          
            MIL.MappAlloc(MIL.M_NULL, MIL.M_DEFAULT, ref MilApplication);
            MIL.MsysAlloc(MIL.M_DEFAULT, "M_SYSTEM_HOST", MIL.M_DEFAULT, MIL.M_DEFAULT, ref MilSystem);
            MIL.MdispAlloc(MilSystem, MIL.M_DEFAULT, "M_DEFAULT", MIL.M_DEFAULT, ref Display);

            // Control Block for Display
            MIL.MdispControl(Display, MIL.M_TITLE, "Display");

            MIL.MbufImport(IMAGE_FILE, MIL.M_DEFAULT, MIL.M_RESTORE + MIL.M_NO_GRAB + MIL.M_NO_COMPRESS, MilSystem, ref Panneaux);
                      
            MIL.MbufClone(Panneaux, MIL.M_DEFAULT, MIL.M_DEFAULT, MIL.M_DEFAULT, MIL.M_DEFAULT, MIL.M_DEFAULT, MIL.M_DEFAULT, ref MimBinarizedestination);
            MIL.MbufClone(MimBinarizedestination, MIL.M_DEFAULT, MIL.M_DEFAULT, MIL.M_DEFAULT, MIL.M_DEFAULT, MIL.M_DEFAULT, MIL.M_DEFAULT, ref MimOpendestination);
            MIL.MbufClone(MimOpendestination, MIL.M_DEFAULT, MIL.M_DEFAULT, MIL.M_DEFAULT, MIL.M_DEFAULT, MIL.M_DEFAULT, MIL.M_DEFAULT, ref MimEdgeDetectIntensity);

            MIL.MimBinarize(Panneaux, MimBinarizedestination, MIL.M_BIMODAL + MIL.M_LESS, 0.0, 255.0);
            MIL.MimOpen(MimBinarizedestination, MimOpendestination, 4, MIL.M_BINARY);
            MIL.MimEdgeDetect(MimOpendestination, MimEdgeDetectIntensity, MIL.M_NULL, MIL.M_SOBEL + MIL.M_OVERSCAN_ENABLE, MIL.M_DEFAULT, 0);

            MIL.MbufGet(MimEdgeDetectIntensity, tab);

            int thetaX = 360;
            int roY = (int)Math.Sqrt(Math.Pow(424, 2) + Math.Pow(476, 2));

            int[,] vote = new int[thetaX, roY];            

            for (int x = 0; x < 424; x++)
            {
                for (int y = 0; y < 476; y++)
                {
                    if (tab[y, x] == 255)
                    {
                        for (int teta = 0; teta < 360; teta++)
                        {
                            double ro = x * Math.Cos(teta * Math.PI/180) + y * Math.Sin(teta * Math.PI / 180);

                            if (ro > 0) { 
                                int roInt = (int)ro;                            
                                vote[teta, roInt]++;
                            }
                        }
                    }
                }
            }

            MIL.MdispSelect(Display, MimEdgeDetectIntensity);

            MIL_ID graphicContext = MIL.M_NULL;
            MIL.MgraAlloc(MilSystem, ref graphicContext);


            int[] maxTeta = new int[6];
            int[] maxRo = new int[6];

            for (int k = 0; k < 6; k++)
            {
                for (int i = 0; i < thetaX; i++)
                {
                    for (int j = 0; j < roY; j++)
                    {
                        if (vote[i, j] > vote[maxTeta[k], maxRo[k]])
                        {
                            int valueTeta = Array.IndexOf(maxTeta, i);
                            int valueRo = Array.IndexOf(maxRo, j);

                            if (valueTeta < 0 && valueRo < 0)
                            {
                                maxTeta[k] = i;
                                maxRo[k] = j;
                            }                       
                        }
                    }
                }

                double premierPointY = 476;
                double premierPointX = (maxRo[k] - (476 * Math.Sin(maxTeta[k] * Math.PI / 180))) / Math.Cos(maxTeta[k] * Math.PI / 180);

                double deuxiemePointY = 0;
                double deuxiemePointX = maxRo[k] / Math.Cos(maxTeta[k] * Math.PI / 180);

                MIL.MgraLine(graphicContext, MimEdgeDetectIntensity, premierPointX, premierPointY, deuxiemePointX, deuxiemePointY);
                
            }

            Console.WriteLine("Press <ENTER> to continue");
            Console.ReadKey();

            MIL.MgraFree(graphicContext);
            MIL.MbufFree(MimEdgeDetectIntensity);
            MIL.MbufFree(MimOpendestination);
            MIL.MbufFree(MimBinarizedestination);
            MIL.MbufFree(Panneaux);
            MIL.MdispFree(Display);
            MIL.MsysFree(MilSystem);
            MIL.MappFree(MilApplication);
        }
      }
   }
